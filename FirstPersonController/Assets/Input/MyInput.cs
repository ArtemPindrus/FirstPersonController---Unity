//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Input
{
    public partial class @MyInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MyInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""9f05a84e-6435-4ffe-a051-02604520712f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""773682e8-244b-40bc-9cf1-3d384c4c43b1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""de52a94b-b9c2-4f51-80bf-712bfcbc3c1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""bcd7d7cf-3105-4648-8ef4-9a3f0bbd3f4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lean"",
                    ""type"": ""Button"",
                    ""id"": ""cdca543c-88b3-49b5-b3d9-b5b0cb080a90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""8bb89047-f9e3-4661-ab6e-15657047fb51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookAround"",
                    ""type"": ""Value"",
                    ""id"": ""4476bac2-11f5-47ac-aa5c-ec698c7bc8e1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0997cf61-3774-4c5c-9b35-8616daff4b06"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3922068c-b520-4a25-bf98-fd1b6ffee929"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9a352dc4-c25b-4db2-8d52-59d318f0d58b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2d18e4d2-88d3-4886-8325-25210f6b3cc8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""65f44d87-2e4c-4ed3-9183-b5632acf7f0c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""602e4278-b327-457e-b8ac-69ff99daa5fd"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bf4000c-85f9-4316-8d7a-20b35fed34d3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c325203d-5d88-4ac2-af50-f2fdf31b6ff0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lean"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cf4365a9-bb27-449c-a245-aa3b769ebe75"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lean"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8f8745d7-8af0-4914-b742-52568cc990ad"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lean"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c801e180-4805-4fbb-b1f3-0081d7fe5437"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd932ddc-5c5e-458d-af9e-47082e270c06"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DragAndDropSystem"",
            ""id"": ""08647760-c414-4910-8d08-a3de345f0f09"",
            ""actions"": [
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""3eeb8d75-2e16-4f3b-ad7a-c6c0251dcb72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateDraggable"",
                    ""type"": ""Button"",
                    ""id"": ""499b254d-cf83-485c-9377-2f5d581cdedd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""12bcf2d5-a763-4eb9-b5d9-2c929fb489a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9620e1ee-f485-4627-97f2-a2b8a6b34279"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2a813ac-d725-4e47-9aca-6be27fe3bc4f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDraggable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a806134d-2644-4b44-93a9-574814b7c7ce"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerMovement
            m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
            m_PlayerMovement_Move = m_PlayerMovement.FindAction("Move", throwIfNotFound: true);
            m_PlayerMovement_Run = m_PlayerMovement.FindAction("Run", throwIfNotFound: true);
            m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
            m_PlayerMovement_Lean = m_PlayerMovement.FindAction("Lean", throwIfNotFound: true);
            m_PlayerMovement_Crouch = m_PlayerMovement.FindAction("Crouch", throwIfNotFound: true);
            m_PlayerMovement_LookAround = m_PlayerMovement.FindAction("LookAround", throwIfNotFound: true);
            // DragAndDropSystem
            m_DragAndDropSystem = asset.FindActionMap("DragAndDropSystem", throwIfNotFound: true);
            m_DragAndDropSystem_Drag = m_DragAndDropSystem.FindAction("Drag", throwIfNotFound: true);
            m_DragAndDropSystem_RotateDraggable = m_DragAndDropSystem.FindAction("RotateDraggable", throwIfNotFound: true);
            m_DragAndDropSystem_Throw = m_DragAndDropSystem.FindAction("Throw", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerMovement
        private readonly InputActionMap m_PlayerMovement;
        private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
        private readonly InputAction m_PlayerMovement_Move;
        private readonly InputAction m_PlayerMovement_Run;
        private readonly InputAction m_PlayerMovement_Jump;
        private readonly InputAction m_PlayerMovement_Lean;
        private readonly InputAction m_PlayerMovement_Crouch;
        private readonly InputAction m_PlayerMovement_LookAround;
        public struct PlayerMovementActions
        {
            private @MyInput m_Wrapper;
            public PlayerMovementActions(@MyInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_PlayerMovement_Move;
            public InputAction @Run => m_Wrapper.m_PlayerMovement_Run;
            public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
            public InputAction @Lean => m_Wrapper.m_PlayerMovement_Lean;
            public InputAction @Crouch => m_Wrapper.m_PlayerMovement_Crouch;
            public InputAction @LookAround => m_Wrapper.m_PlayerMovement_LookAround;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerMovementActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Lean.started += instance.OnLean;
                @Lean.performed += instance.OnLean;
                @Lean.canceled += instance.OnLean;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @LookAround.started += instance.OnLookAround;
                @LookAround.performed += instance.OnLookAround;
                @LookAround.canceled += instance.OnLookAround;
            }

            private void UnregisterCallbacks(IPlayerMovementActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Run.started -= instance.OnRun;
                @Run.performed -= instance.OnRun;
                @Run.canceled -= instance.OnRun;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Lean.started -= instance.OnLean;
                @Lean.performed -= instance.OnLean;
                @Lean.canceled -= instance.OnLean;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
                @LookAround.started -= instance.OnLookAround;
                @LookAround.performed -= instance.OnLookAround;
                @LookAround.canceled -= instance.OnLookAround;
            }

            public void RemoveCallbacks(IPlayerMovementActions instance)
            {
                if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerMovementActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

        // DragAndDropSystem
        private readonly InputActionMap m_DragAndDropSystem;
        private List<IDragAndDropSystemActions> m_DragAndDropSystemActionsCallbackInterfaces = new List<IDragAndDropSystemActions>();
        private readonly InputAction m_DragAndDropSystem_Drag;
        private readonly InputAction m_DragAndDropSystem_RotateDraggable;
        private readonly InputAction m_DragAndDropSystem_Throw;
        public struct DragAndDropSystemActions
        {
            private @MyInput m_Wrapper;
            public DragAndDropSystemActions(@MyInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Drag => m_Wrapper.m_DragAndDropSystem_Drag;
            public InputAction @RotateDraggable => m_Wrapper.m_DragAndDropSystem_RotateDraggable;
            public InputAction @Throw => m_Wrapper.m_DragAndDropSystem_Throw;
            public InputActionMap Get() { return m_Wrapper.m_DragAndDropSystem; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DragAndDropSystemActions set) { return set.Get(); }
            public void AddCallbacks(IDragAndDropSystemActions instance)
            {
                if (instance == null || m_Wrapper.m_DragAndDropSystemActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DragAndDropSystemActionsCallbackInterfaces.Add(instance);
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
                @RotateDraggable.started += instance.OnRotateDraggable;
                @RotateDraggable.performed += instance.OnRotateDraggable;
                @RotateDraggable.canceled += instance.OnRotateDraggable;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
            }

            private void UnregisterCallbacks(IDragAndDropSystemActions instance)
            {
                @Drag.started -= instance.OnDrag;
                @Drag.performed -= instance.OnDrag;
                @Drag.canceled -= instance.OnDrag;
                @RotateDraggable.started -= instance.OnRotateDraggable;
                @RotateDraggable.performed -= instance.OnRotateDraggable;
                @RotateDraggable.canceled -= instance.OnRotateDraggable;
                @Throw.started -= instance.OnThrow;
                @Throw.performed -= instance.OnThrow;
                @Throw.canceled -= instance.OnThrow;
            }

            public void RemoveCallbacks(IDragAndDropSystemActions instance)
            {
                if (m_Wrapper.m_DragAndDropSystemActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDragAndDropSystemActions instance)
            {
                foreach (var item in m_Wrapper.m_DragAndDropSystemActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DragAndDropSystemActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DragAndDropSystemActions @DragAndDropSystem => new DragAndDropSystemActions(this);
        public interface IPlayerMovementActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnLean(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnLookAround(InputAction.CallbackContext context);
        }
        public interface IDragAndDropSystemActions
        {
            void OnDrag(InputAction.CallbackContext context);
            void OnRotateDraggable(InputAction.CallbackContext context);
            void OnThrow(InputAction.CallbackContext context);
        }
    }
}
